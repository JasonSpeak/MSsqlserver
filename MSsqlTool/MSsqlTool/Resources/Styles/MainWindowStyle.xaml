<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf"
    xmlns:dm="clr-namespace:MSsqlTool.Model"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:converters="clr-namespace:MSsqlTool.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolTip.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/themes/materialdesigntheme.popupbox.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:PercentageConverter x:Key="PercentageConverter" />
    <converters:BoolToVisibleConverter x:Key="BoolToVisibleConverter" />

    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CaptionHeight="40"
                    CornerRadius="5"
                    GlassFrameThickness="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
        <Setter Property="AllowsTransparency" Value="False" />
        <Setter Property="MinWidth" Value="840" />
        <Setter Property="MinHeight" Value="525" />
        <Setter Property="Title" Value="MSsqlTool" />
        <Setter Property="Icon" Value="../Images/SQL.png" />
        <Setter Property="TextElement.FontSize" Value="16" />
        <Setter Property="TextElement.FontWeight" Value="Medium" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#3448a1" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=WindowState}" Value="{x:Static WindowState.Maximized}">
                <Setter Property="BorderThickness" Value="8"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LogoStyle" TargetType="{x:Type Image}">
        <Style.Setters>
            <Setter Property="Margin" Value="20,10,0,11" />
            <Setter Property="HorizontalAlignment" Value="Left" />
            <Setter Property="Source" Value="../Images/logo.png" />
            <Setter Property="Stretch" Value="Uniform" />
            <Setter Property="StretchDirection" Value="Both" />
        </Style.Setters>
    </Style>

    <Style x:Key="TitleGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="#3448a1" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    </Style>

    <Style x:Key="MiniMizePathStyle" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="F1M0,1L12.001,1 12.001,0 0,0z" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
        <Setter Property="Height" Value="1px" />
    </Style>

    <Style x:Key="ClosePathStyle" TargetType="{x:Type Path}">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Data" Value="F1M11.706,0.706L11,0 5.852,5.146 0.706,0 -0.001,0.706 5.146,5.852 -0.001,11 0.706,11.706 5.852,6.56 11,11.706 11.706,11 6.56,5.852z" />
        <Setter Property="Fill" Value="#FFA0A9D3" />
    </Style>

    <Style x:Key="RestorePathStyle" TargetType="{x:Type Path}">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Fill" Value="#FF9AA4D0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                <Setter Property="Data" Value="F1M11,8L9,8 9,4 9,3 8,3 4,3 4,1 11,1z M8,11L1,11 1,4 3,4 4,4 8,4 8,8 8,9z M11,0L4,0 3,0 3,1 3,3 1,3 0,3 0,4 0,11 0,12 1,12 8,12 9,12 9,11 9,9 11,9 12,9 12,8 12,1 12,0z" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Normal">
                <Setter Property="Data" Value="F1M11,11L1,11 1,1 11,1z M11,0L1,0 0,0 0,1 0,11 0,12 1,12 11,12 12,12 12,11 12,1 12,0z" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TitleCloseButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Width" Value="20px" />
        <Setter Property="Height" Value="20px" />
        <Setter Property="Margin" Value="5,0,10,0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ToolTip" Value="关闭" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="0"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Path Style="{StaticResource ClosePathStyle}"></Path>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="Red" />
                            <Setter Property="Background" TargetName="border" Value="Red" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TitleMinimizeButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Width" Value="20px" />
        <Setter Property="Height" Value="20px" />
        <Setter Property="Margin" Value="0,0,70,0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="#3448a1" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="ToolTip" Value="最小化" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="0"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Path Style="{StaticResource MiniMizePathStyle}"></Path>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="WhiteSmoke" />
                            <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonInTreeView" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="MyBackgroundElement"
                        BorderThickness="0"
                        Opacity="1">
                        <ContentPresenter
                            x:Name="ButtonContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="TitleNormalButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Width" Value="20px" />
        <Setter Property="Height" Value="20px" />
        <Setter Property="Margin" Value="5,0,40,0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="#3448a1" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" x:Name="border" 
                                CornerRadius="0"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Path Style="{StaticResource RestorePathStyle}"></Path>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="WhiteSmoke" />
                            <Setter Property="Background" TargetName="border" Value="WhiteSmoke" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                <Setter Property="ToolTip" Value="向下还原" />
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Normal">
                <Setter Property="ToolTip" Value="最大化" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TreeViewIconStyle" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="15px" />
        <Setter Property="Height" Value="15px" />
        <Style.Triggers>
            <Trigger Property="Tag" Value="tables">
                <Setter Property="Source" Value="../Images/table.png" />
            </Trigger>
            <Trigger Property="Tag" Value="databases">
                <Setter Property="Source" Value="../Images/database.png" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LonwinTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource MaterialDesignTreeViewItemFocusVisual}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <wpf:ScaleHost x:Name="ScaleHost" />
                        <ToggleButton
                            x:Name="Expander"
                            Margin="8,0,8,0"
                            VerticalAlignment="Center"
                            ClickMode="Press"
                            Foreground="Black"
                            IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource MaterialDesignExpandCollapseToggleStyle}" />

                        <Border
                            x:Name="MouseOverBorder"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Foreground,
                                                         Converter={StaticResource BrushRoundConverter}}"
                            IsHitTestVisible="False"
                            Opacity="0" />

                        <Border
                            x:Name="SelectedBorder"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Background="#3448a1"
                            IsHitTestVisible="False"
                            Opacity="0" />

                        <Grid
                            x:Name="ContentGrid"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Background="Transparent">
                            <wpf:Ripple
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Feedback="{TemplateBinding Foreground,
                                                           Converter={StaticResource BrushRoundConverter}}"
                                Focusable="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ContentPresenter x:Name="PART_Header" ContentSource="Header" />
                            </wpf:Ripple>
                        </Grid>

                        <ContentControl
                            x:Name="AdditionalContentControl"
                            Grid.Row="1"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:TreeViewAssist.AdditionalTemplate)}"
                            ContentTemplateSelector="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:TreeViewAssist.AdditionalTemplateSelector)}"
                            Visibility="Collapsed" />

                        <StackPanel
                            x:Name="ItemsPanel"
                            Grid.Row="2"
                            Grid.Column="1"
                            Grid.ColumnSpan="2"
                            Margin="-16,0,0,0">
                            <StackPanel.Height>
                                <MultiBinding Converter="{StaticResource MathMlpMultipleConverter}">
                                    <Binding ElementName="ItemsHost" Path="ActualHeight" />
                                    <Binding ElementName="ScaleHost" Path="Scale" />
                                </MultiBinding>
                            </StackPanel.Height>
                            <ItemsPresenter
                                x:Name="ItemsHost"
                                VerticalAlignment="Top"
                                Opacity="0"
                                Visibility="Collapsed" />
                        </StackPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MouseOverBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.1"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="MouseOverBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0" />
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="SelectedBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unselected" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" To="Expanded">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation
                                                Storyboard.TargetName="ItemsHost"
                                                Storyboard.TargetProperty="Opacity"
                                                To="1"
                                                Duration="0:0:0.3" />
                                            <DoubleAnimation
                                                Storyboard.TargetName="ScaleHost"
                                                Storyboard.TargetProperty="Scale"
                                                To="1"
                                                Duration="0:0:0.3" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0" To="Collapsed">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CubicEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0.3" Value="{x:Static Visibility.Collapsed}" />
                                            </ObjectAnimationUsingKeyFrames>
                                            <DoubleAnimation
                                                Storyboard.TargetName="ItemsHost"
                                                Storyboard.TargetProperty="Opacity"
                                                To="0"
                                                Duration="0:0:0.3" />
                                            <DoubleAnimation
                                                Storyboard.TargetName="ScaleHost"
                                                Storyboard.TargetProperty="Scale"
                                                To="0"
                                                Duration="0:0:0.3" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ItemsHost"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleHost"
                                            Storyboard.TargetProperty="Scale"
                                            To="1"
                                            Duration="0:0:0.3" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="ItemsHost"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="ScaleHost"
                                            Storyboard.TargetProperty="Scale"
                                            To="0"
                                            Duration="0:0:0.3" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemsHost" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:TreeViewAssist.AdditionalTemplate), Converter={StaticResource NullableToVisibilityConverter}, Mode=OneWay}" Value="Visible">
                            <Setter TargetName="AdditionalContentControl" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:TreeViewAssist.AdditionalTemplateSelector), Converter={StaticResource NullableToVisibilityConverter}, Mode=OneWay}" Value="Visible">
                            <Setter TargetName="AdditionalContentControl" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value=".56" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="TreeViewItemStyle"
        BasedOn="{StaticResource LonwinTreeViewItem}"
        TargetType="TreeViewItem">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Level}" Value="databases">
                <Setter Property="ContextMenu" Value="{DynamicResource DatabaseMenu}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="tables">
                <Setter Property="ContextMenu" Value="{DynamicResource OpenTables}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Border
                                x:Name="MyBackgroundElement"
                                Margin="20,0,0,0"
                                BorderThickness="0"
                                IsHitTestVisible="True">
                                <Button Style="{StaticResource ButtonInTreeView}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding Source={StaticResource Locator}, Path=Main.OpenTableCommand}" CommandParameter="{Binding TableFullName}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <StackPanel Margin="10,0,0,0" Orientation="Horizontal">
                                        <Image Style="{StaticResource TreeViewIconStyle}" Tag="{Binding Level}" />
                                        <TextBlock
                                            x:Name="NameTextBlock"
                                            Margin="5"
                                            Text="{Binding Name}" />
                                    </StackPanel>
                                </Button>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="MyBackgroundElement" Property="Background" Value="#3448a1" />
                                    <Setter TargetName="MyBackgroundElement" Property="Opacity" Value="1" />
                                    <Setter TargetName="NameTextBlock" Property="Foreground" Value="White" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsSelected" Value="True" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="IsExpanded" Value="True" />

    </Style>

    <Style x:Key="MenuTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <HierarchicalDataTemplate
                    DataType="{x:Type dm:SqlMenuModel}"
                    ItemContainerStyle="{StaticResource TreeViewItemStyle}"
                    ItemsSource="{Binding MenuTables}">
                    <StackPanel Orientation="Horizontal">
                        <Image Style="{StaticResource TreeViewIconStyle}" Tag="{Binding Level}" />
                        <TextBlock Margin="5" Text="{Binding Name}" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="OpenTabListViewStyle"
        BasedOn="{StaticResource MaterialDesignListView}"
        TargetType="{x:Type ListView}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel IsItemsHost="True" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Viewbox>
                        <Border x:Name="GridChip" BorderBrush="Black" BorderThickness="0,0,1,0">
                            <wpf:Chip
                                x:Name="Chip"
                                Width="{Binding Converter={StaticResource PercentageConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type StackPanel}}, Path=ActualWidth, ConverterParameter=0.166}"
                                Margin="-2,0,0,0"
                                Command="{Binding Source={StaticResource Locator}, Path=Main.ClickTabCommand}"
                                CommandParameter="{Binding TableFullName}"
                                Content="{Binding TableName}"
                                DeleteCommand="{Binding Source={StaticResource Locator}, Path=Main.CloseTabCommand}"
                                DeleteCommandParameter="{Binding TableFullName}"
                                IsTabStop="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}, Path=IsSelected}"
                                Style="{StaticResource TabChip}"
                                ToolTip="{Binding TableName}">
                                <wpf:Chip.ContextMenu>
                                    <ContextMenu Style="{StaticResource LonwinContextMenu}">
                                        <MenuItem
                                            Command="{Binding Source={StaticResource Locator}, Path=Main.CloseTabCommand}"
                                            CommandParameter="{Binding TableFullName}"
                                            Header="关闭" />
                                        <MenuItem
                                            Command="{Binding Source={StaticResource Locator}, Path=Main.CloseOtherTabsCommand}"
                                            CommandParameter="{Binding TableFullName}"
                                            Header="关闭其他文档" />
                                        <MenuItem Command="{Binding Source={StaticResource Locator}, Path=Main.CloseAllTabsCommand}" Header="关闭所有文档" />
                                    </ContextMenu>
                                </wpf:Chip.ContextMenu>
                            </wpf:Chip>
                        </Border>
                    </Viewbox>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsChoosed}" Value="true">
                            <Setter TargetName="Chip" Property="Background"  Value="#283a89" />
                            <Setter TargetName="Chip" Property="Foreground" Value="White" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignPopupBoxButton" TargetType="{x:Type Button}">
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="16,0,16,16" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border
                            x:Name="MouseOverBorder"
                            Background="{TemplateBinding Foreground,
                                                         Converter={StaticResource BrushRoundConverter}}"
                            Opacity="0" />
                        <wpf:Ripple
                            MinHeight="48"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            Feedback="{TemplateBinding Foreground,
                                                       Converter={StaticResource BrushRoundConverter}}"
                            Focusable="False"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" To="Normal">
                                        <VisualTransition.GeneratedEasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </VisualTransition.GeneratedEasingFunction>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Normal" />
                                <VisualState Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="MouseOverBorder"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.1"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.48"
                                            Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopBoxPathStyle" TargetType="{x:Type Path}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Data" Value="F1M0,0L0,1 1,1 1,2 2,2 2,3 3,3 3,4 4,4 4,5 5,5 5,4 6,4 6,3 7,3 7,2 8,2 8,1 9,1 9,0z" />
        <Setter Property="Fill" Value="#3448a1" />
    </Style>

    <Style x:Key="LonwinPopupBox" TargetType="{x:Type wpf:PopupBox}">
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignPopupBoxToggleContent}" />
        <Setter Property="wpf:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="wpf:ShadowAssist.ShadowDepth" Value="Depth3" />
        <Setter Property="TextElement.FontWeight" Value="Normal" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="PlacementMode" Value="BottomAndAlignRightEdges" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="ToggleContent">
            <Setter.Value>
                <Grid Width="40" Height="40">
                    <Path Style="{StaticResource PopBoxPathStyle}" />
                </Grid>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style BasedOn="{StaticResource MaterialDesignSeparator}" TargetType="Separator" />
                        <Style x:Key="ToggleButtonStyle" TargetType="ToggleButton">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <wpf:Ripple
                                            Padding="{TemplateBinding Padding}"
                                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                            wpf:RippleAssist.IsCentered="True"
                                            ClipToBounds="False"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            Focusable="False"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton
                            x:Name="PART_Toggle"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding ToggleContent}"
                            ContentTemplate="{TemplateBinding ToggleContentTemplate}"
                            Cursor="Hand"
                            IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                            IsTabStop="{TemplateBinding IsTabStop}"
                            Style="{StaticResource ToggleButtonStyle}"
                            TabIndex="{TemplateBinding TabIndex}" />
                        <controlzEx:PopupEx
                            x:Name="PART_Popup"
                            AllowsTransparency="True"
                            CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                            HorizontalOffset="5"
                            IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"
                            Placement="Custom"
                            PlacementTarget="{Binding ElementName=PART_Toggle}"
                            PopupAnimation="Fade"
                            VerticalOffset="5">
                            <wpf:Card
                                Margin="5"
                                Padding="{TemplateBinding Padding}"
                                Content="{TemplateBinding PopupContent}"
                                ContentTemplate="{TemplateBinding PopupContentTemplate}"
                                FontSize="15"
                                FontWeight="Regular"
                                Foreground="{DynamicResource MaterialDesignBody}"
                                RenderOptions.ClearTypeHint="Enabled">
                                <wpf:Card.Resources>
                                    <Style BasedOn="{StaticResource MaterialDesignPopupBoxButton}" TargetType="Button" />
                                </wpf:Card.Resources>
                            </wpf:Card>
                        </controlzEx:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="SelectAllHeaderTemplate">
        <CheckBox
            x:Name="CheckBoxAll"
            Command="{Binding Source={StaticResource Locator}, Path=Main.SelectAllCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"
            IsChecked="{Binding Source={StaticResource Locator}, Path=Main.IsAllSelected, Mode=TwoWay}"
            ToolTip="全选/全不选" />
    </DataTemplate>

    <Style x:Key="TabsListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Black" />
    </Style>

    <Style x:Key="FoldTabsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="200" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel>
                        <Viewbox>
                            <wpf:Chip
                                x:Name="Chip"
                                Command="{Binding Source={StaticResource Locator}, Path=Main.ClickFoldCommand}"
                                CommandParameter="{Binding TableFullName}"
                                Content="{Binding TableName}"
                                DeleteCommand="{Binding Source={StaticResource Locator}, Path=Main.CloseFoldTabCommand}"
                                DeleteCommandParameter="{Binding TableFullName}"
                                Style="{StaticResource FoldTabChipStyle}"
                                ToolTip="{Binding TableName}" />
                        </Viewbox>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FoldTabsListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value=" #b7dbff" />
                <Setter Property="BorderBrush" Value=" #b7dbff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TabChip" TargetType="{x:Type wpf:Chip}">
        <Setter Property="Height" Value="50px" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="#d0d0d0" />
        <Setter Property="IconBackground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="IconForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:Chip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.ColumnSpan="3"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0" />
                        <ContentControl
                            x:Name="IconControl"
                            Grid.Column="0"
                            Width="32"
                            Height="32"
                            VerticalAlignment="Center"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            Background="{TemplateBinding IconBackground}"
                            Content="{TemplateBinding Icon}"
                            FontSize="17"
                            FontWeight="Regular"
                            Foreground="{TemplateBinding IconForeground}"
                            IsTabStop="False"
                            Visibility="{TemplateBinding Icon,
                                                         Converter={StaticResource NullableToVisibilityConverter}}">
                            <ContentControl.Clip>
                                <EllipseGeometry
                                    Center="16,16"
                                    RadiusX="16"
                                    RadiusY="16" />
                            </ContentControl.Clip>
                            <ContentControl.Template>
                                <ControlTemplate TargetType="ContentControl">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Content="{TemplateBinding Content}" />
                                    </Border>
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>
                        <ContentControl
                            x:Name="TextBlock"
                            Grid.Column="1"
                            Margin="8,0,12,0"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            IsTabStop="False" />
                        <Button
                            x:Name="PART_DeleteButton"
                            Grid.Column="2"
                            Width="16"
                            Height="16"
                            Margin="-6,0,8,0"
                            VerticalAlignment="Center"
                            ToolTip="{TemplateBinding DeleteToolTip}"
                            Visibility="{TemplateBinding IsDeletable,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Ellipse
                                            x:Name="Bg"
                                            Fill="#FFA6A6A6"
                                            Stroke="#FF009587"
                                            StrokeThickness="0" />
                                        <wpf:PackIcon
                                            Width="12"
                                            Height="12"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Kind="Close" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Bg" Property="StrokeThickness" Value="1" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="IconControl" Property="Visibility" Value="Collapsed">
                            <Setter TargetName="TextBlock" Property="Margin" Value="12,0,12,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsDeletable" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FoldTabChipStyle" TargetType="{x:Type wpf:Chip}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Width" Value="196" />
        <Setter Property="Height" Value="30px" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Background" Value="#eaf0ff" />
        <Setter Property="IconBackground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="IconForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:Chip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.ColumnSpan="3"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0" />
                        <ContentControl
                            x:Name="IconControl"
                            Grid.Column="0"
                            Width="32"
                            Height="32"
                            VerticalAlignment="Center"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            Background="{TemplateBinding IconBackground}"
                            Content="{TemplateBinding Icon}"
                            FontSize="17"
                            FontWeight="Regular"
                            Foreground="{TemplateBinding IconForeground}"
                            IsTabStop="False"
                            Visibility="{TemplateBinding Icon,
                                                         Converter={StaticResource NullableToVisibilityConverter}}">
                            <ContentControl.Clip>
                                <EllipseGeometry
                                    Center="16,16"
                                    RadiusX="16"
                                    RadiusY="16" />
                            </ContentControl.Clip>
                            <ContentControl.Template>
                                <ControlTemplate TargetType="ContentControl">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Content="{TemplateBinding Content}" />
                                    </Border>
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>
                        <ContentControl
                            x:Name="TextBlock"
                            Grid.Column="1"
                            Margin="8,0,12,0"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            IsTabStop="False" />
                        <Button
                            x:Name="PART_DeleteButton"
                            Grid.Column="2"
                            Width="16"
                            Height="16"
                            Margin="-6,0,8,0"
                            VerticalAlignment="Center"
                            ToolTip="{TemplateBinding DeleteToolTip}"
                            Visibility="{TemplateBinding IsDeletable,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Ellipse
                                            x:Name="Bg"
                                            Fill="#FFA6A6A6"
                                            Stroke="#FF009587"
                                            StrokeThickness="0" />
                                        <wpf:PackIcon
                                            Width="12"
                                            Height="12"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Kind="Close" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Bg" Property="StrokeThickness" Value="1" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="IconControl" Property="Visibility" Value="Collapsed">
                            <Setter TargetName="TextBlock" Property="Margin" Value="12,0,12,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsDeletable" Value="True" />
                <Setter Property="Background" Value="#b7dbff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="TreeViewMainItemStyle"
        BasedOn="{StaticResource LonwinTreeViewItem}"
        TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True" />
        <Setter Property="ContextMenu" Value="{DynamicResource TreeViewMainItemContextMenu}" />
    </Style>

    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#e8e8ec" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Height" Value="30px" />
        <Setter Property="BorderThickness" Value="0.5" />
    </Style>

    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Width" Value="5px" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="#3448a1" />
    </Style>

    <Style x:Key="MaterialDesignDataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding Source={StaticResource Locator}, Path=Main.CheckForSelectAllCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".56" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DataGridCellStyle"
        BasedOn="{StaticResource MaterialDesignDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="White" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Height" Value="30" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#b7dbff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DataGridCheckBoxCellStyle"
        BasedOn="{StaticResource MaterialDesignDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="Background" Value="#e8e8ec" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGridRow}}, Path=IsNewItem}" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Grid
                                Background="#e8e8ec"
                                IsEnabled="False"
                                IsHitTestVisible="False">
                                <wpf:PackIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    IsEnabled="False"
                                    Kind="Plus" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="LonwinDataGridTextColumnEditingStyle"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="BorderBrush" Value="#b7dbff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        Width="auto"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="LonwinDataGrid"
        BasedOn="{StaticResource MaterialDesignDataGrid}"
        TargetType="{x:Type DataGrid}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CanUserAddRows" Value="True" />
        <Setter Property="CanUserDeleteRows" Value="True" />
        <Setter Property="CanUserSortColumns" Value="False" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="wpf:DataGridAssist.AutoGeneratedEditingTextStyle" Value="{StaticResource LonwinDataGridTextColumnEditingStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Border
                                            Grid.Row="0"
                                            Grid.Column="2"
                                            Background="#e8e8ec"
                                            BorderBrush="Black"
                                            BorderThickness="0,0.5,0,0.5" />
                                        <Button
                                            Grid.Row="0"
                                            Grid.Column="0"
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                            Command="{x:Static DataGrid.SelectAllCommand}"
                                            Focusable="false"
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                          TypeInTargetAssembly={x:Type DataGrid}}}"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <Border
                                            Grid.Row="0"
                                            Grid.Column="1"
                                            BorderBrush="Black"
                                            BorderThickness="0,0,0,0.2"
                                            Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}">
                                            <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" />
                                        </Border>
                                        <ScrollContentPresenter
                                            x:Name="PART_ScrollContentPresenter"
                                            Grid.Row="1"
                                            Grid.ColumnSpan="2"
                                            CanContentScroll="{TemplateBinding CanContentScroll}" />
                                        <ScrollBar
                                            x:Name="PART_VerticalScrollBar"
                                            Grid.Row="1"
                                            Grid.Column="2"
                                            Maximum="{TemplateBinding ScrollableHeight}"
                                            Orientation="Vertical"
                                            ViewportSize="{TemplateBinding ViewportHeight}"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar
                                                x:Name="PART_HorizontalScrollBar"
                                                Grid.Column="1"
                                                Maximum="{TemplateBinding ScrollableWidth}"
                                                Orientation="Horizontal"
                                                ViewportSize="{TemplateBinding ViewportWidth}"
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="LonwinContextMenu"
        BasedOn="{StaticResource MaterialDesignMenu}"
        TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                        <Border
                            Margin="2"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0"
                            Effect="{DynamicResource MaterialDesignShadowDepth1}">
                            <Border Background="Transparent">
                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid Margin="0,0" RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckAllBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Height" Value="40" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <ContextMenu x:Key="TreeViewMainItemContextMenu" Style="{StaticResource LonwinContextMenu}">
        <MenuItem Command="{Binding Source={StaticResource Locator}, Path=Main.ImportCommand}" Header="导入" />
        <MenuItem Command="{Binding Source={StaticResource Locator}, Path=Main.RefreshCommand}" Header="刷新" />
    </ContextMenu>

    <ContextMenu x:Key="DatabaseMenu" Style="{StaticResource LonwinContextMenu}">
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.ExportCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.Name}"
            Header="导出" />
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.DeleteCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.Name}"
            Header="删除" />
    </ContextMenu>

    <ContextMenu x:Key="OpenTables" Style="{StaticResource LonwinContextMenu}">
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.OpenTableCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.TableFullName}"
            Header="打开" />
    </ContextMenu>
</ResourceDictionary>