<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commandBehaviors="clr-namespace:MSsqlTool.CommandBehaviors"
    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:viewModel="clr-namespace:MSsqlTool.ViewModel"
    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes">
    <Style x:Key="WindowTitleStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    CaptionHeight="40"
                    CornerRadius="0"
                    GlassFrameThickness="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
        <Setter Property="AllowsTransparency" Value="false" />
        <Setter Property="Margin" Value="5,0,0,0" />
    </Style>

    <Style x:Key="TabChip" TargetType="{x:Type wpf:Chip}">
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Background" Value="{DynamicResource MaterialDesignChipBackground}" />
        <Setter Property="IconBackground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="IconForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:Chip}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Grid.ColumnSpan="3"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0" />
                        <ContentControl
                            x:Name="IconControl"
                            Width="32"
                            Height="32"
                            VerticalAlignment="Center"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            Background="{TemplateBinding IconBackground}"
                            Content="{TemplateBinding Icon}"
                            FontSize="17"
                            FontWeight="Regular"
                            Foreground="{TemplateBinding IconForeground}"
                            IsTabStop="False"
                            Visibility="{TemplateBinding Icon,
                                                         Converter={StaticResource NullableToVisibilityConverter}}">
                            <ContentControl.Clip>
                                <EllipseGeometry
                                    Center="16,16"
                                    RadiusX="16"
                                    RadiusY="16" />
                            </ContentControl.Clip>
                            <ContentControl.Template>
                                <ControlTemplate TargetType="ContentControl">
                                    <Border Background="{TemplateBinding Background}">
                                        <ContentPresenter
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            Content="{TemplateBinding Content}" />
                                    </Border>
                                </ControlTemplate>
                            </ContentControl.Template>
                        </ContentControl>
                        <ContentControl
                            x:Name="TextBlock"
                            Grid.Column="1"
                            Margin="8,0,12,0"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            IsTabStop="False" />
                        <Button
                            x:Name="PART_DeleteButton"
                            Grid.Column="2"
                            Width="16"
                            Height="16"
                            Margin="-6,0,8,0"
                            VerticalAlignment="Center"
                            ToolTip="{TemplateBinding DeleteToolTip}"
                            Visibility="{TemplateBinding IsDeletable,
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Button.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Ellipse
                                            x:Name="Bg"
                                            Fill="#FFA6A6A6"
                                            Stroke="#FF009587"
                                            StrokeThickness="0" />
                                        <wpf:PackIcon
                                            Width="12"
                                            Height="12"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Kind="Close" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Bg" Property="StrokeThickness" Value="1" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="IconControl" Property="Visibility" Value="Collapsed">
                            <Setter TargetName="TextBlock" Property="Margin" Value="12,0,12,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TreeViewItemStyle"
        BasedOn="{StaticResource MaterialDesignTreeViewItem}"
        TargetType="TreeViewItem">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Level}" Value="databases">
                <Setter Property="ContextMenu" Value="{DynamicResource DatabaseMenu}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Level}" Value="tables">
                <Setter Property="ContextMenu" Value="{DynamicResource OpenTables}" />
                <Setter Property="commandBehaviors:MouseDoubleClick.Command" Value="{Binding Source={StaticResource Locator}, Path=Main.OpenTableCommand}" />
                <Setter Property="commandBehaviors:MouseDoubleClick.CommandParameter" Value="{Binding TableFullName}" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsSelected" Value="True" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="IsExpanded" Value="True" />
    </Style>

    <Style
        x:Key="TreeViewMainItemStyle"
        BasedOn="{StaticResource MaterialDesignTreeViewItem}"
        TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="True" />
    </Style>

    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#e8e8ec" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="BorderThickness" Value="0.5" />
    </Style>

    <Style x:Key="TitleCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="MyBackgroundElement"
                        BorderBrush="#3448a1"
                        BorderThickness="0">
                        <ContentPresenter
                            x:Name="ButtonContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MyBackgroundElement" Property="Background" Value="Red" />
                            <Setter TargetName="MyBackgroundElement" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TitleMinimizeButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="MyBackgroundElement"
                        BorderBrush="#3448a1"
                        BorderThickness="0">
                        <ContentPresenter
                            x:Name="ButtonContentPresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MyBackgroundElement" Property="Background" Value="GhostWhite" />
                            <Setter TargetName="MyBackgroundElement" Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RestorePathStyle" TargetType="{x:Type Path}">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Fill" Value="#FFA0A9D3" />
        <Style.Triggers>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" 
                Value="Maximized">
                <Setter 
                    Property="Data" 
                    Value="F1M11,8L9,8 9,4 9,3 8,3 4,3 4,1 11,1z M8,11L1,11 1,4 3,4 4,4 8,4 8,8 8,9z M11,0L4,0 3,0 3,1 3,3 1,3 0,3 0,4 0,11 0,12 1,12 8,12 9,12 9,11 9,9 11,9 12,9 12,8 12,1 12,0z" />
            </DataTrigger>
            <DataTrigger 
                Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" 
                Value="Normal">
                <Setter 
                    Property="Data"
                    Value="F1M11,11L1,11 1,1 11,1z M11,0L1,0 0,0 0,1 0,11 0,12 1,12 11,12 12,12 12,11 12,1 12,0z"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TitleNormalButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized">
                <Setter Property="ToolTip" Value="向下还原" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="MyBackgroundElement"
                                BorderBrush="#3448a1"
                                BorderThickness="0">
                                <ContentPresenter
                                    x:Name="ButtonContentPresenter"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <ei:ChangePropertyAction
                                            PropertyName="WindowState"
                                            TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                                            Value="Normal" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="MyBackgroundElement" Property="Background" Value="GhostWhite" />
                                    <Setter TargetName="MyBackgroundElement" Property="Opacity" Value="0.7" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Normal">
                <Setter Property="ToolTip" Value="最大化" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="MyBackgroundElement"
                                BorderBrush="#3448a1"
                                BorderThickness="0">
                                <ContentPresenter
                                    x:Name="ButtonContentPresenter"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonDown">
                                        <ei:ChangePropertyAction
                                            PropertyName="WindowState"
                                            TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                                            Value="Maximized" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="MyBackgroundElement" Property="Background" Value="GhostWhite" />
                                    <Setter TargetName="MyBackgroundElement" Property="Opacity" Value="0.7" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDesignDataGridCell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.CellPadding)}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction 
                                    Command="{Binding Source={StaticResource Locator}, Path=Main.CheckForSelectAllCommand}" 
                                    CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".56" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DataGridCellStyle"
        BasedOn="{StaticResource MaterialDesignDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Height" Value="40" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#b7dbff" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DataGridCheckBoxCellStyle"
        BasedOn="{StaticResource MaterialDesignDataGridCell}"
        TargetType="DataGridCell">
        <Setter Property="Background" Value="#e8e8ec" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,0,0,0" />
    </Style>

    <Style
        x:Key="LonwinDataGridTextColumnEditingStyle"
        BasedOn="{StaticResource MaterialDesignTextBox}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="0,0,0,-5" />
        <Setter Property="BorderThickness" Value="0,0,0,5" />
        <Setter Property="BorderBrush" Value="#b7dbff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="border"
                        Padding="0,-1,0,3"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="false"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                            <wpf:SmartHint
                                x:Name="Hint"
                                Margin="1,0"
                                FontSize="{TemplateBinding FontSize}"
                                Hint="{Binding Path=(wpf:HintAssist.Hint), RelativeSource={RelativeSource TemplatedParent}}"
                                HintOpacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static wpf:HintProxyFabricConverter.Instance}}"
                                UseFloating="{Binding Path=(wpf:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="LonwinDataGrid"
        BasedOn="{StaticResource MaterialDesignDataGrid}"
        TargetType="{x:Type DataGrid}">
        <Setter Property="wpf:DataGridAssist.AutoGeneratedEditingTextStyle" Value="{StaticResource LonwinDataGridTextColumnEditingStyle}" />
    </Style>

    <Style
        x:Key="LonwinContextMenu"
        BasedOn="{StaticResource MaterialDesignMenu}"
        TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:ShadowAssist.CacheMode)}">
                        <Border
                            Margin="2"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0"
                            Effect="{DynamicResource MaterialDesignShadowDepth1}">
                            <Border Background="Transparent">
                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid Margin="0,0" RenderOptions.ClearTypeHint="Enabled">
                                        <ItemsPresenter
                                            x:Name="ItemsPresenter"
                                            Grid.IsSharedSizeScope="True"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="DatabaseMenu" Style="{StaticResource LonwinContextMenu}">
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.ExportCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.Name}"
            Header="导出" />
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.DeleteCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.Name}"
            Header="删除" />
    </ContextMenu>

    <ContextMenu x:Key="OpenTables" Style="{StaticResource LonwinContextMenu}">
        <MenuItem
            Command="{Binding Source={StaticResource Locator}, Path=Main.OpenTableCommand}"
            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContextMenu}, Path=PlacementTarget.Header.TableFullName}"
            Header="打开" />
    </ContextMenu>

    <viewModel:PercentageConverter x:Key="PercentageConverter" />
    <viewModel:IconPathConverter x:Key="IconPathConverter" />
    <viewModel:BoolToVisibleConverter x:Key="BoolToVisibleConverter" />
</ResourceDictionary>